{"ast":null,"code":"var _jsxFileName = \"/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [avatarUrls, setAvatarUrls] = useState([]);\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n        const avatarUrlsPromises = data.data.map(async notification => {\n          try {\n            const avatarUrl = await getUserAvatar(notification.createdUserId);\n            return avatarUrl;\n          } catch (error) {\n            console.error(\"Error fetching user avatar:\", error);\n            return null;\n          }\n        });\n        const urls = await Promise.all(avatarUrlsPromises);\n        setAvatarUrls(urls);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n    fetchNotifications();\n  }, []);\n  const markAsRead = notificationId => {\n    // Implement the logic to mark the notification as read\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(Notifications, {\n        notification: notification,\n        avatarUrl: avatarUrls[index],\n        markAsRead: markAsRead\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ListNotifications, \"2FwgKIx9zk6BFUBrjX4BE8NX+/g=\");\n_c = ListNotifications;\nexport default ListNotifications;\nvar _c;\n$RefreshReg$(_c, \"ListNotifications\");","map":{"version":3,"names":["React","useState","useEffect","getNotifications","getUserAvatar","Notifications","jsxDEV","_jsxDEV","ListNotifications","_s","notifications","setNotifications","avatarUrls","setAvatarUrls","fetchNotifications","data","avatarUrlsPromises","map","notification","avatarUrl","createdUserId","error","console","urls","Promise","all","markAsRead","notificationId","children","fileName","_jsxFileName","lineNumber","columnNumber","index","id","_c","$RefreshReg$"],"sources":["/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\n\nconst ListNotifications = () => {\n  const [notifications, setNotifications] = useState([]);\n  const [avatarUrls, setAvatarUrls] = useState([]);\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n        const avatarUrlsPromises = data.data.map(async (notification) => {\n          try {\n            const avatarUrl = await getUserAvatar(notification.createdUserId);\n            return avatarUrl;\n          } catch (error) {\n            console.error(\"Error fetching user avatar:\", error);\n            return null;\n          }\n        });\n        const urls = await Promise.all(avatarUrlsPromises);\n        setAvatarUrls(urls);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  const markAsRead = (notificationId) => {\n    // Implement the logic to mark the notification as read\n  };\n\n  return (\n    <div>\n      <h2>Notifications</h2>\n      <ul>\n        {notifications.map((notification, index) => (\n          <Notifications\n            key={notification.id}\n            notification={notification}\n            avatarUrl={avatarUrls[index]}\n            markAsRead={markAsRead}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListNotifications;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,WAAW;AAC3D,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMZ,gBAAgB,CAAC,CAAC;QACrCQ,gBAAgB,CAACI,IAAI,CAACA,IAAI,CAAC;QAC3B,MAAMC,kBAAkB,GAAGD,IAAI,CAACA,IAAI,CAACE,GAAG,CAAC,MAAOC,YAAY,IAAK;UAC/D,IAAI;YACF,MAAMC,SAAS,GAAG,MAAMf,aAAa,CAACc,YAAY,CAACE,aAAa,CAAC;YACjE,OAAOD,SAAS;UAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;YACnD,OAAO,IAAI;UACb;QACF,CAAC,CAAC;QACF,MAAME,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACT,kBAAkB,CAAC;QAClDH,aAAa,CAACU,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDP,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,UAAU,GAAIC,cAAc,IAAK;IACrC;EAAA,CACD;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBzB,OAAA;MAAAqB,QAAA,EACGlB,aAAa,CAACO,GAAG,CAAC,CAACC,YAAY,EAAEe,KAAK,kBACrC1B,OAAA,CAACF,aAAa;QAEZa,YAAY,EAAEA,YAAa;QAC3BC,SAAS,EAAEP,UAAU,CAACqB,KAAK,CAAE;QAC7BP,UAAU,EAAEA;MAAW,GAHlBR,YAAY,CAACgB,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIrB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CA/CID,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAiDvB,eAAeA,iBAAiB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}