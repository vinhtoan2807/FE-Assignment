{"ast":null,"code":"var _jsxFileName = \"/Users/vinhtoan287/Desktop/FE-Assignment/src/components/ListNotifications/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getNotifications } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n    fetchNotifications();\n  }, []);\n  const markAsRead = async notificationId => {\n    try {\n      await markNotificationAsRead(notificationId);\n      // Đánh dấu thông báo là đã đọc trong state\n      setNotifications(prevNotifications => prevNotifications.map(notification => notification.id === notificationId ? {\n        ...notification,\n        isRead: true\n      } : notification));\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map(notification => /*#__PURE__*/_jsxDEV(Notifications, {\n        notification: notification,\n        markAsRead: markAsRead\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ListNotifications, \"6gMUc0OfbF4zJu51/S5RmKCczuA=\");\n_c = ListNotifications;\nexport default ListNotifications;\nvar _c;\n$RefreshReg$(_c, \"ListNotifications\");","map":{"version":3,"names":["React","useState","useEffect","getNotifications","Notifications","jsxDEV","_jsxDEV","ListNotifications","_s","notifications","setNotifications","fetchNotifications","data","error","console","markAsRead","notificationId","markNotificationAsRead","prevNotifications","map","notification","id","isRead","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinhtoan287/Desktop/FE-Assignment/src/components/ListNotifications/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getNotifications } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\nconst ListNotifications = () => {\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await markNotificationAsRead(notificationId);\n      // Đánh dấu thông báo là đã đọc trong state\n      setNotifications((prevNotifications) =>\n        prevNotifications.map((notification) =>\n          notification.id === notificationId\n            ? { ...notification, isRead: true }\n            : notification\n        )\n      );\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n    }\n  };\n  return (\n    <div>\n      <h2>Notifications</h2>\n      <ul>\n        {notifications.map((notification) => (\n          <Notifications\n            key={notification.id}\n            notification={notification}\n            markAsRead={markAsRead}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListNotifications;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,QAAQ,WAAW;AAC5C,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMS,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMT,gBAAgB,CAAC,CAAC;QACrCO,gBAAgB,CAACE,IAAI,CAACA,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDF,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,UAAU,GAAG,MAAOC,cAAc,IAAK;IAC3C,IAAI;MACF,MAAMC,sBAAsB,CAACD,cAAc,CAAC;MAC5C;MACAN,gBAAgB,CAAEQ,iBAAiB,IACjCA,iBAAiB,CAACC,GAAG,CAAEC,YAAY,IACjCA,YAAY,CAACC,EAAE,KAAKL,cAAc,GAC9B;QAAE,GAAGI,YAAY;QAAEE,MAAM,EAAE;MAAK,CAAC,GACjCF,YACN,CACF,CAAC;IACH,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;EACD,oBACEP,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBrB,OAAA;MAAAiB,QAAA,EACGd,aAAa,CAACU,GAAG,CAAEC,YAAY,iBAC9Bd,OAAA,CAACF,aAAa;QAEZgB,YAAY,EAAEA,YAAa;QAC3BL,UAAU,EAAEA;MAAW,GAFlBK,YAAY,CAACC,EAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGrB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACnB,EAAA,CA7CID,iBAAiB;AAAAqB,EAAA,GAAjBrB,iBAAiB;AA+CvB,eAAeA,iBAAiB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}