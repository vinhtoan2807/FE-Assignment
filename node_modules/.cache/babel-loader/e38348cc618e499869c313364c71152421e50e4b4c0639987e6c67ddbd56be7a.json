{"ast":null,"code":"var _jsxFileName = \"/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n    fetchNotifications();\n  }, []);\n  const markAsRead = notificationId => {\n    // Implement the logic to mark the notification as read\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map(async notification => {\n        try {\n          const avatarUrl = await getUserAvatar(notification.createdUserId);\n          return /*#__PURE__*/_jsxDEV(Notifications, {\n            notification: notification,\n            avatarUrl: avatarUrl,\n            markAsRead: markAsRead\n          }, notification.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this);\n        } catch (error) {\n          console.error(\"Error fetching user avatar:\", error);\n          return null;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ListNotifications, \"6gMUc0OfbF4zJu51/S5RmKCczuA=\");\n_c = ListNotifications;\nexport default ListNotifications;\nvar _c;\n$RefreshReg$(_c, \"ListNotifications\");","map":{"version":3,"names":["React","useState","useEffect","getNotifications","getUserAvatar","Notifications","jsxDEV","_jsxDEV","ListNotifications","_s","notifications","setNotifications","fetchNotifications","data","error","console","markAsRead","notificationId","children","fileName","_jsxFileName","lineNumber","columnNumber","map","notification","avatarUrl","createdUserId","id","_c","$RefreshReg$"],"sources":["/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\n\nconst ListNotifications = () => {\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const data = await getNotifications();\n        setNotifications(data.data);\n      } catch (error) {\n        console.error(\"Error fetching notifications:\", error);\n      }\n    };\n\n    fetchNotifications();\n  }, []);\n\n  const markAsRead = (notificationId) => {\n    // Implement the logic to mark the notification as read\n  };\n\n  return (\n    <div>\n      <h2>Notifications</h2>\n      <ul>\n        {notifications.map(async (notification) => {\n          try {\n            const avatarUrl = await getUserAvatar(notification.createdUserId);\n            return (\n              <Notifications\n                key={notification.id}\n                notification={notification}\n                avatarUrl={avatarUrl}\n                markAsRead={markAsRead}\n              />\n            );\n          } catch (error) {\n            console.error(\"Error fetching user avatar:\", error);\n            return null;\n          }\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListNotifications;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,WAAW;AAC3D,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMV,gBAAgB,CAAC,CAAC;QACrCQ,gBAAgB,CAACE,IAAI,CAACA,IAAI,CAAC;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDF,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,UAAU,GAAIC,cAAc,IAAK;IACrC;EAAA,CACD;EAED,oBACEV,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBf,OAAA;MAAAW,QAAA,EACGR,aAAa,CAACa,GAAG,CAAC,MAAOC,YAAY,IAAK;QACzC,IAAI;UACF,MAAMC,SAAS,GAAG,MAAMrB,aAAa,CAACoB,YAAY,CAACE,aAAa,CAAC;UACjE,oBACEnB,OAAA,CAACF,aAAa;YAEZmB,YAAY,EAAEA,YAAa;YAC3BC,SAAS,EAAEA,SAAU;YACrBT,UAAU,EAAEA;UAAW,GAHlBQ,YAAY,CAACG,EAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIrB,CAAC;QAEN,CAAC,CAAC,OAAOR,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACnD,OAAO,IAAI;QACb;MACF,CAAC;IAAC;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACb,EAAA,CA3CID,iBAAiB;AAAAoB,EAAA,GAAjBpB,iBAAiB;AA6CvB,eAAeA,iBAAiB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}