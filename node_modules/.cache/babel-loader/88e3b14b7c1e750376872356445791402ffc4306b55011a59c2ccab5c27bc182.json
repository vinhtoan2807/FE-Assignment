{"ast":null,"code":"var _jsxFileName = \"/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListNotifications = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [avatarUrls, setAvatarUrls] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const notificationsData = await getNotifications();\n        setNotifications(notificationsData.data);\n        const avatarUrlsPromises = notificationsData.data.map(notification => getUserAvatar(notification.createdUserId));\n        const urls = await Promise.all(avatarUrlsPromises);\n        setAvatarUrls(urls);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const markAsRead = notificationId => {\n    // Implement the logic to mark the notification as read\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(Notifications, {\n        notification: notification,\n        avatarUrl: avatarUrls[index],\n        markAsRead: markAsRead\n      }, notification.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ListNotifications, \"2FwgKIx9zk6BFUBrjX4BE8NX+/g=\");\n_c = ListNotifications;\nexport default ListNotifications;\nvar _c;\n$RefreshReg$(_c, \"ListNotifications\");","map":{"version":3,"names":["React","useState","useEffect","getNotifications","getUserAvatar","Notifications","jsxDEV","_jsxDEV","ListNotifications","_s","notifications","setNotifications","avatarUrls","setAvatarUrls","fetchData","notificationsData","data","avatarUrlsPromises","map","notification","createdUserId","urls","Promise","all","error","console","markAsRead","notificationId","children","fileName","_jsxFileName","lineNumber","columnNumber","index","avatarUrl","id","_c","$RefreshReg$"],"sources":["/Users/vinhtoan287/Desktop/FE-Assignment/src/components/AvatarNotifications/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getNotifications, getUserAvatar } from \"../../API\";\nimport Notifications from \"../Notifications/index\";\n\nconst ListNotifications = () => {\n  const [notifications, setNotifications] = useState([]);\n  const [avatarUrls, setAvatarUrls] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const notificationsData = await getNotifications();\n        setNotifications(notificationsData.data);\n\n        const avatarUrlsPromises = notificationsData.data.map((notification) =>\n          getUserAvatar(notification.createdUserId)\n        );\n\n        const urls = await Promise.all(avatarUrlsPromises);\n        setAvatarUrls(urls);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const markAsRead = (notificationId) => {\n    // Implement the logic to mark the notification as read\n  };\n\n  return (\n    <div>\n      <h2>Notifications</h2>\n      <ul>\n        {notifications.map((notification, index) => (\n          <Notifications\n            key={notification.id}\n            notification={notification}\n            avatarUrl={avatarUrls[index]}\n            markAsRead={markAsRead}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListNotifications;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,WAAW;AAC3D,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,iBAAiB,GAAG,MAAMZ,gBAAgB,CAAC,CAAC;QAClDQ,gBAAgB,CAACI,iBAAiB,CAACC,IAAI,CAAC;QAExC,MAAMC,kBAAkB,GAAGF,iBAAiB,CAACC,IAAI,CAACE,GAAG,CAAEC,YAAY,IACjEf,aAAa,CAACe,YAAY,CAACC,aAAa,CAC1C,CAAC;QAED,MAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACN,kBAAkB,CAAC;QAClDJ,aAAa,CAACQ,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDV,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,UAAU,GAAIC,cAAc,IAAK;IACrC;EAAA,CACD;EAED,oBACEpB,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBzB,OAAA;MAAAqB,QAAA,EACGlB,aAAa,CAACQ,GAAG,CAAC,CAACC,YAAY,EAAEc,KAAK,kBACrC1B,OAAA,CAACF,aAAa;QAEZc,YAAY,EAAEA,YAAa;QAC3Be,SAAS,EAAEtB,UAAU,CAACqB,KAAK,CAAE;QAC7BP,UAAU,EAAEA;MAAW,GAHlBP,YAAY,CAACgB,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIrB,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACvB,EAAA,CA3CID,iBAAiB;AAAA4B,EAAA,GAAjB5B,iBAAiB;AA6CvB,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}